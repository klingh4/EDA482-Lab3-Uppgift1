Uppgift 1

I den här uppgiften skall ni skriva ett program som m.h.a. systick och interna interrupts lägger ut en fyrkantsvåg på pinne 0 på Port E. 

Följande funktioner skall implementeras: 

// I den här funktionen skall lägre byten av Port E förberedas för att lägga
// ut en signal på pinne 0. Den skall bara kallas en gång. 
void InitSquareWave(); 

// När man kallat den här funktionen skall en fyrkantsvåg med given period 
// (i mikrosekunder) läggas ut på pinne 0, Port E. Perioden skall kunna 
// vara upp till 99000 mikrosekunder.
void StartSquarewave(unsigned int period_in_us);

// Den här funktionen skall avbryta fyrkantsvågen. 
void StopSquareWave(); 

För att testa funktionerna kan ni koppla in en bargraph på Port E och kontrollera att första lampan blinkar med följande kod i main:

// Den här siffran skall sättas lämpligt för att ni skall kunna se den blinkande
// lampan i simulatorn.
#define PERIOD 100

void main()
{
  InitSquareWave();
  StartSquareWave(PERIOD); 
  while(1) { /* Gör ingenting */ }
  StopSquareWave(); 
}

När ni dubblar periodtiden skall lampan blinka hälften så fort. Kom ihåg att simulatorn är mycket långsammare än den riktiga hårdvaran, så ni kan inte testa att periodtiden är korrekt på simulatorn.

SysTick beskrevs i Lektion 6 och interna avbrott beskrevs i Lektion 8.
Tips

    Eftersom perioden maximalt ska kunna vara 99000 mikrosekunder, betyder det att Systick-räknaren kan räkna hela intervallet "på egen hand". Det behövs alltså inga hjälpfunktioner (t.ex. delay_1mikro(), delay() osv.) eller flaggor (t.ex. systick_flag) som förekommer i boken. Förutsatt att ni har ställt in Systick på rätt intervall och lagt till er interrupt handler i vektortabellen, kommer er interrupt handler enbart behöva invertera ("flippa") bit 0 på port E.

Uppgift 2

I förra laborationsuppgiften skapade ni kod för att läsa av tangentbordet, men processorn var sedan tvungen att ligga i en evig loop för att känna av om en tangent trycks ned. I den här uppgiften skall ni istället se till att tangentbordet läses av automatiskt varje gång en knapp trycks ner, m.h.a. interrupts. Följande funktion skall implementeras (ni får, och bör, använda er av kod från förra labben): 

// Global variabel som skall vara 0xFF om ingen tangent
// är nedtryckt och annars identifierar den nedtryckta
// knappen. 
volatile unsigned char currently_pressed_key = 0xFF; 

// Den här funktionen skall konfigurera övre byten av Port E och aktivera ALLA rader på keyboarden.
// Interrupts skall initieras så att en interrupt handler kallas när någon knapp trycks ner. 
// Interrupthandlern skall uppdatera "currently_pressed_key"
void InitKeyboard();

När även denna kod funkar kan ni testa med följande main program: 

#define PERIOD 100

void main()
{
  InitSquareWave();
  InitKeyboard();
  StartSquareWave(PERIOD); 
  while(currently_pressed_key != 1) { /* Gör ingenting förrän man trycker på knapp '1'*/ }
  StopSquareWave(); 
  while(currently_pressed_key != 5) { /* Gör ingenting förrän man trycker på knapp '5'*/ }
  StartSquareWave(PERIOD * 2); 
  while(currently_pressed_key != 9) { /* Gör ingenting förrän man trycker på knapp '9'*/ }
  StopSquareWave(); 
}

Om er kod funkar så skall lampan blinka när ni startar programmet. När ni trycker på "1" skall lampan sluta blinka. När ni trycker på "5" skall lampan blinka hälften så fort. När ni slutligen trycker på "9" skall programmet avslutas.

Hur tangentbordet fungerar diskuterades i Lektion 5. Hur externa interrupts fungerar diskuterades i Lektion 9.

Tips: Om ni kör keyb() funktionen som vanligt ifrån eran interrupt handler kan ni få problem med att ett nytt interrupt skapas, som skapar ett nytt, som skapar ett nytt... Stäng i så fall av EXTI interrupten det första ni gör i interrupthandlern och sätt på dem igen innan ni returnerar.

Tips

    Ett smidigt sätt att stänga av/sätta på EXTI-interrupten är att använda sig av registret EXTI_IMR.
    För att läsa av tangentbordet i interrupthandlern, kan ni anropa keyb() som ni använde i lab 2.
    En förutsättning för att keypaden ska kunna trigga avbrott är att raderna är aktiverade, glöm därför inte att återaktivera alla rader i er interrupthandler efter att ni anropat keyb(), men före ni sätter på EXTI-interrupten igen.
    De avbrottsinställningar ni behöver göra i InitKeyboard() kan sammanfattas i fem steg som finns beskrivna i FAQ. Men observera att ni inte kan använda exempelkoden rakt av, ni måste anpassa den efter uppgiften!
    Många glömmer att aktivera tangentbordets rader InitKeyboard(), detta gör ni genom att ettställa port E pin 12–15.
